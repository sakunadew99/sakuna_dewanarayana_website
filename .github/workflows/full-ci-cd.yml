name: Docker + Vercel CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE_NAME: sakuna-portfolio
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ==========================================
  # Job 1: Code Quality & Testing
  # ==========================================
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install --legacy-peer-deps

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: 📝 TypeScript check
        run: npx tsc --noEmit
        continue-on-error: true

      - name: 🏗️ Build verification
        run: npm run build

  # ==========================================
  # Job 2: Build & Push Docker Image
  # ==========================================
  docker-build:
    name: 🐳 Build & Push Docker
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 🏷️ Generate tags
        id: tags
        run: |
          DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          
          echo "image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "tag_latest=${DOCKER_IMAGE}:latest" >> $GITHUB_OUTPUT
          echo "tag_sha=${DOCKER_IMAGE}:${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "cache_ref=${DOCKER_IMAGE}:buildcache" >> $GITHUB_OUTPUT

      - name: 🏗️ Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.tags.outputs.tag_latest }}
            ${{ steps.tags.outputs.tag_sha }}
          labels: |
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=registry,ref=${{ steps.tags.outputs.cache_ref }}
          cache-to: type=registry,ref=${{ steps.tags.outputs.cache_ref }},mode=max

      - name: ✅ Image digest
        run: |
          echo "🐳 Image pushed successfully!"
          echo "📦 Tags:"
          echo "  - ${{ steps.tags.outputs.tag_latest }}"
          echo "  - ${{ steps.tags.outputs.tag_sha }}"

  # ==========================================
  # Job 3: Deploy Preview (Pull Requests)
  # ==========================================
  deploy-preview:
    name: 🔍 Deploy Preview
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔽 Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Preview
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: 💬 Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Preview Deployed!**\n\n✅ Preview: ${{ steps.deploy.outputs.url }}\n\n_Docker image will be built after merge to main_'
            })

  # ==========================================
  # Job 4: Deploy Production
  # ==========================================
  deploy-production:
    name: 🌐 Deploy Production
    needs: [test, docker-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔽 Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: ✅ Deployment Complete
        run: |
          echo "✅ Production deployment complete!"
          echo "🐳 Docker: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "🌐 Vercel: Check dashboard for URL"